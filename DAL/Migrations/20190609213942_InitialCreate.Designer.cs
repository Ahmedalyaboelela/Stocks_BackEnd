// <auto-generated />
using System;
using DAL.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DAL.Migrations
{
    [DbContext(typeof(StocksContext))]
    [Migration("20190609213942_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DAL.Entities.Account", b =>
                {
                    b.Property<int>("AccountID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountCategory");

                    b.Property<bool>("AccountType");

                    b.Property<int?>("AccoutnParentID");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("CreditLimit")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("DebitLimit")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Fax")
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Mobile")
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("NameAR")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("NameEN")
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<string>("Phone1")
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Phone2")
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("TaxNum")
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Telex")
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("AccountID");

                    b.HasIndex("AccoutnParentID");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("DAL.Entities.Country", b =>
                {
                    b.Property<int>("CountryID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NameAR")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("NameEN")
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("CountryID");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("DAL.Entities.Partner", b =>
                {
                    b.Property<int>("PartnerID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountID");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ConvertNumber")
                        .HasColumnType("nvarchar(150)");

                    b.Property<int?>("CountryID");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Fax")
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("IdentityNumber")
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("IdentityType");

                    b.Property<DateTime?>("IssueDate");

                    b.Property<string>("IssuePlace")
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Mobile")
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("NameAR")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("NameEN")
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Phone1")
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Phone2")
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("PartnerID");

                    b.HasIndex("AccountID");

                    b.HasIndex("CountryID");

                    b.ToTable("Partners");
                });

            modelBuilder.Entity("DAL.Entities.Account", b =>
                {
                    b.HasOne("DAL.Entities.Account")
                        .WithMany("SubAccounts")
                        .HasForeignKey("AccoutnParentID");
                });

            modelBuilder.Entity("DAL.Entities.Partner", b =>
                {
                    b.HasOne("DAL.Entities.Account", "Account")
                        .WithMany("Partners")
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.Entities.Country", "Country")
                        .WithMany("Partners")
                        .HasForeignKey("CountryID");
                });
#pragma warning restore 612, 618
        }
    }
}
